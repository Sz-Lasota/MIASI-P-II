

--- This module provides functionality to transform UseCase diagrams to Class diagrams, based on following rules:
--- 	1. All Actors are converted to coresponding Access Class, class name is Actor name* + 'Controller' word, Actor class have
---			operations coressponding to associated UseCases. *Transformed to UpperCamelCase
--- 	2. All UseCases are converted to Classes with class name the same as UseCase name, class have operations corresponding use cases,
---			operation parameters are derived from associated Activity diagram (by UseCase and Initial Node name).
---		3. All generalization relations are preserved, it means if Actor1 is generalized version of Actor2, then 
---			Actor1Controller class is generalized version of Actor2Controller class. The same goes for UseCases
---		4. Associations between Actor and UseCase is preserved, so if Actor1 associated with UseCase1, then Actor1Controller Class 
---			will be associated with UseCase1 Class
---		5. If UseCase includes another UseCase, then Class coressponding to *Whole* UseCase will have composition with *Part* UseCase
---		6. If UseCase have extension as another UseCase, then Class coressponding to *Whole* UseCase will have composition with *Part* UseCase
--- 	7. Package structure is preserved
---     8. Comments are preserved

module UseCase2Class;

-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
create OUT: UML from IN: UML;

uses UseCaseTransformationLib;

--- Rule transforms associations, owned ends stays the same in OUT model
rule AssociationToAssociation {
	from
		aIn: UML!Association
	to
		aOut: UML!Association(
			ownedEnd <- aIn.ownedEnd,
			memberEnd <- aOut.ownedEnd
		)
}

--- Rule transforms ownedEnd of association, where name, type and owner stays the same
rule OwnedEndToOwnedEnd {
	from
		pIn: UML!Property(not pIn.association.oclIsUndefined())
	to
		pOut: UML!Property(
			name <- pIn.name,
			type <- pIn.type,
			association <- pIn.association
		)
}

--- Rule transforms Comment to Comment, preserving it's body and connection to annotatedElement
rule CommentToComment {
	from
		cIn: UML!Comment
	to 
		cOut: UML!Comment(
			body <- cIn.body,
			annotatedElement <- cIn.annotatedElement
		)
}

--- Rule transforms Actors to Access class, where:
--- 1. Name is transformed to UpperCamelCase and concated with 'Controller' to mark it as access class
--- 2. Generalizations are preserved from IN model
--- 3. For each associated Use Case operation is created, with name of Use Case transfered to LowerCamelCase
rule ActorToClass { 
	from 
		a : UML!Actor 
	to
		c : UML!Class ( 
				name <- thisModule.toUpperCamelCase(a.name) + 'Controller',
				ownedOperation <- thisModule.getAssociatedUseCases(a)->collect(
					uc |  thisModule.UseCaseToOperation(uc)
				),
				generalization <- a.generalization
	)
}

--- Rule transforms Generaliztion between Actors or UseCases to Generalization between classes
rule GeneralizationToGeneralization {
	from
		gIn: UML!Generalization
	to
		gOut: UML!Generalization(
			general <- gIn.general
		)
}

--- Rule creates operation for Actor class with provided Use Case with name of this Use Case to LowerCamelCase
lazy rule UseCaseToOperation { 
	from 
		uc : UML!UseCase
	to
		op : UML!Operation ( 
				name <- thisModule.toLowerCamelCase(uc.name),
				ownedParameter <- Sequence {}
			)
}

--- Rule transforms Use Case to Class, where:
--- 1. Name is transformed to UpperCamelCase
--- 2. Generalization is preserved from IN model
--- 3. Extension points are transformed to attributes
--- 4. Includes are transformed to attributres
--- 5. Single public operation is created, parameters of this operation are fetched from 
--- 	corresponding activity diagram if present, otherwise no parameters are created.
rule UseCaseToClass { 
	from 
		uc : UML!UseCase
	to
		cl : UML!Class(
				name <- thisModule.toUpperCamelCase(uc.name),
				generalization <- uc.generalization,
				ownedAttribute <- uc.extensionPoint,
				ownedAttribute <- uc.include,
				ownedOperation <- op
			),
		op : UML!Operation(
			name <- thisModule.toLowerCamelCase(uc.name),
			ownedParameter <- thisModule.getOperationParameters(uc.name)->collect(
				ap | thisModule.ActivityParameterToOperationParameter(ap)	
			)
		)
}

--- Rule transforms extension points to class atributes, with aggregation relation
rule ExtensionPointToAttribute {
	from
		ep :UML!ExtensionPoint
	to
		p: UML!Property(
			name <- thisModule.toLowerCamelCase(thisModule.getExtendedUseCase(ep).name),
			type <- thisModule.getExtendedUseCase(ep),
			aggregation <- 'shared'
		)
}

--- Rule transforms <<extend>> relation to composition where "independent whole" Use Case 
--- becomes "indepented whole" class in composition relation.
rule ExtendToComposition {
	from 
		e : UML!Extend
	to
		a : UML!Association(
			ownedEnd <- oM,
			memberEnd <- a.ownedEnd,
			memberEnd <- e.extensionLocation
		),
		oM: UML!Property(
			name <- e.extendedCase.name,
			type <- e.extendedCase
		)
}

--- Lazy rule to transform ActivityParameterNode from activity diagram into
--- Operation parameter for class diagram, where:
---	1. Name is not changed
--- 2. Type is not changed
--- 3. Direction is based on number of incoming and outgoing edges
lazy rule ActivityParameterToOperationParameter {
	from
		ap: UML!ActivityParameterNode
	to
		op: UML!Parameter(
			name <- ap.name,
			type <- ap.type,
			direction <- thisModule.getDirection(ap)
		)
}	

--- Rule transforms <<include>> relation from Use Case diagram to Composition relation
--- between relevant classes, where "dependent whole" Use Case become "Independent whole" Class.
--- This relation cannot be transformed into "aggregation" relation because "required part" Use Case 
--- can be standalone UseCase, where "depended part" in aggregation cannot be standalone class and function 
--- only with other class of this relation.
rule IncludeToComposition {
	from
		inc: UML!Include
	to
		oM : UML!Property(
			name <- inc.addition.name,
			type <- inc.addition,
			aggregation <- 'shared'
		),
		a: UML!Association(
			ownedEnd <- oS,
			memberEnd <- a.ownedEnd,
			memberEnd <- oM
		),
		oS : UML!Property(
			name <- inc.owner.name,
			type <- inc.owner
		)
		
}

--- This rule rewrite Activity to OUT diagram for compatibility with M2T part of transformation
rule ActivityToActivity {
	from
		aIn : UML!Activity
	to
		aOut: UML!Activity(
			name <- aIn.name
			,node <- aIn.node
		)
}

--- This rule rewrite ControlFlow to OUT diagram for compatibility with M2T part of transformation
rule ControlFlowToControlFlow {
	from
		cfIn : UML!ControlFlow
	to
		cfOut : UML!ControlFlow(
			source <- cfIn.source,
			target <- cfIn.target,
			guard <- cfIn.guard,
			activity <- cfIn.activity
		)
}

--- This rule rewrite LiteralBoolen to OUT diagram for compatibility with M2T part of transformation
rule LieteralBooleanToLiteralBoolean {
	from 
		lbIn : UML!LiteralBoolean
	to
		lbOut: UML!LiteralBoolean(
			name <- lbIn.name,
			value <- lbIn.value
		)
}

--- This rule rewrite Action to OUT diagram for compatibility with M2T part of transformation
rule OpaqueActionToOpaqueAction {
	from
		aIn : UML!OpaqueAction
	to
		aOut: UML!OpaqueAction(
			name <- aIn.name
		)
}

--- This rule rewrite Initial Node to OUT diagram for compatibility with M2T part of transformation
rule InitialNodeToInitialNode {
	from
		aIn : UML!InitialNode
	to
		aOut: UML!InitialNode(
			name <- aIn.name
			--,activity <- aIn.activity
		)
}

--- This rule rewrite Final Node to OUT diagram for compatibility with M2T part of transformation
rule ActivityFinalNodeToActivityFinalNode {
	from
		aIn : UML!ActivityFinalNode
	to
		aOut: UML!ActivityFinalNode(
			name <- aIn.name
		)
}

--- This rule rewrite Decision Node to OUT diagram for compatibility with M2T part of transformation
rule DecisionNodeToDecisionNode {
	from
		aIn : UML!DecisionNode
	to
		aOut: UML!DecisionNode(
			name <- aIn.name
		)
}

--- This rule rewrite ActivityParameter Node to OUT diagram for compatibility with M2T part of transformation
rule ActivityParameterNodeToActivityParameterNode {
	from
		aIn : UML!ActivityParameterNode
	to
		aOut: UML!ActivityParameterNode(
			name <- aIn.name,
			type <- aIn.type
		)
}

--- Rule to pack all transformed elements and **new** elements to new model
rule ModelToModel {
	from
		pIn : UML!Model
	to 
		POut : UML!Model(
			name <- pIn.name,
			packagedElement <- pIn.packagedElement,
			packagedElement <- UML!Association.allInstances(),
			ownedComment <- pIn.ownedComment
		)
}

--- Rule to preserve packages
rule PackageToPackage {
	from
		pIn : UML!Package(
			not pIn.oclIsTypeOf(UML!Model)	
		)
	to 
		pOut : UML!Package(
			name <- pIn.name,
			packagedElement <- pIn.packagedElement
		)
}


