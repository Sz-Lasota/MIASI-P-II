module UseCase2Class;

-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML

--- This module provides functionality to transform UseCase diagrams to Class diagrams, based on following rules:
--- 	1. All Actors are converted to coresponding Class, class name is Actor name* + 'Controller' word, Actor class have
---			operations coressponding to associated UseCases
--- 	2. All UseCases are converted to Classes with class name the same as* UseCase name
---		3. All generalization relations are preserved, it means if Actor1 is generalized version of Actor2, then 
---			Actor1Controller class is generalized version of Actor2Controller class. The same goes for UseCases
---		4. Associations between Actor and UseCase is preserved, so if Actor1 associated with UseCase1, then Actor1Controller Class 
---			will be associated with UseCase1 Class
---		5. If UseCase includes another UseCase, then Class coressponding to *Whole* UseCase will have composition with *Part* UseCase
---		6. If UseCase have extension as another UseCase, then Class coressponding to *Whole* UseCase will have aggregation with *Part* UseCase
--- 	7. Package structure is preserved
---	* Spaces are converted to '_'

create OUT: UML from IN: UML;

--- Helper to get all UseCases associated with provided Actor
helper def : getAssociatedUseCases(a : UML!Actor) : Sequence(UML!UseCase) =
	UML!Association.allInstances()->select(
		assoc | assoc.ownedEnd->select(end | end.oclIsTypeOf(UML!Property) and end.type = a)->notEmpty()
	)->collect(
		assoc | assoc.ownedEnd->select(end | not (end.type = a))->first().type
	)->asSequence();



--- Helper to transform names with spaces to valid Class diagram names (replacing spaces with '_')
helper def : standarizeName(s : String) : String = s.replaceAll(' ', '_');

helper def: toLowerCamelCase(input : String) : String =
  let words : Sequence(String) = input.split(' ') in
  let firstWord : String = words->first().toLower() in
  let restWords : String = words->subSequence(2, words->size())->collect(
  	w | w.substring(1, 1).toUpper() + w.substring(2, w.size()).toLower()
  )->iterate(w; acc : String = '' | acc + w) in
  firstWord + restWords;

 helper def: toUpperCamelCase(input : String) : String =
  let words : Sequence(String) = input.split(' ') in
  words->collect(
  	w | w.substring(1, 1).toUpper() + w.substring(2, w.size()).toLower()
  )->iterate(w; acc : String = '' | acc + w);

helper def : getExtendedUseCase(ep: UML!ExtensionPoint) : UML!UseCase =
	UML!Extend.allInstances()->select(
		ex | ex.extensionLocation->select( ep1 | ep1=ep)->notEmpty()
	)->collect(ex | ex.owner)->first();


rule AssociationToAssociation {
	from
		aIn: UML!Association
	to
		aOut: UML!Association(
			ownedEnd <- aIn.ownedEnd,
			memberEnd <- aOut.ownedEnd
		)
}


rule OwnedEndToOwnedEnd {
	from
		pIn: UML!Property(not pIn.association.oclIsUndefined())
	to
		pOut: UML!Property(
			name <- pIn.name,
			type <- pIn.type,
			association <- pIn.association
		)
}

--- Rule to transform Actors to Classes
rule ActorToClass { 
	from 
		a : UML!Actor 
	to
		c : UML!Class ( 
				name <- thisModule.toUpperCamelCase(a.name) + 'Controller',
				ownedOperation <- thisModule.getAssociatedUseCases(a)->collect(
					uc |  thisModule.UseCaseToOperation(uc)
				),
				generalization <- a.generalization
	)
}

rule ExtensionPointToAttribute {
	from
		ep :UML!ExtensionPoint
	to
		p: UML!Property(
			name <- thisModule.toLowerCamelCase(thisModule.getExtendedUseCase(ep).name),
			type <- thisModule.getExtendedUseCase(ep),
			aggregation <- 'shared'
		)
}

rule ExtendToComposition {
	from 
		e : UML!Extend
	to
		a : UML!Association(
			ownedEnd <- oM,
			memberEnd <- a.ownedEnd,
			memberEnd <- e.extensionLocation
		),
		oM: UML!Property(
			name <- e.extendedCase.name,
			type <- e.extendedCase
		)
}


rule UseCaseToClass { 
	from 
		uc : UML!UseCase
	to
		cl : UML!Class(
				name <- thisModule.toUpperCamelCase(uc.name),
				generalization <- uc.generalization,
				ownedAttribute <- uc.extensionPoint,
				ownedAttribute <- uc.include,
				ownedOperation <- op
			),
		op : UML!Operation(
			name <- thisModule.toLowerCamelCase(uc.name)
		)
}


rule IncludeToComposition {
	from
		inc: UML!Include
	to
		oM : UML!Property(
			name <- inc.addition.name,
			type <- inc.addition,
			aggregation <- 'shared'
		),
		a: UML!Association(
			ownedEnd <- oS,
			memberEnd <- a.ownedEnd,
			memberEnd <- oM
		),
		oS : UML!Property(
			name <- inc.owner.name,
			type <- inc.owner
		)
		
}


--- Transforms Generaliztion between Actors to Generalization between classes
rule ActorGeneralizationToGeneralization {
	from
		gIn: UML!Generalization
	to
		gOut: UML!Generalization(
			general <- gIn.general
		)
}


--- Creates operation for Actor class with provided UseCase
lazy rule UseCaseToOperation { 
	from 
		uc : UML!UseCase
	to
		op : UML!Operation ( 
				name <- thisModule.toLowerCamelCase(uc.name),
				ownedParameter <- Sequence {}
			)
}


-- -------------- Activity diagram utils

rule ActivityToActivity {
	from
		aIn : UML!Activity
	to
		aOut : UML!Activity(
			name <- aIn.name,
			node <- aIn.node,
			edge <- aIn.edge
		)
}

rule ParameterToParameter {
	from
		pIn: UML!ActivityParameterNode
	to 
		pOut: UML!ActivityParameterNode(
			name <- pIn.name,
			ordering <- pIn.ordering,
			type <- pIn.type
		)
}


rule ActionToAction {
	from
		aIn: UML!OpaqueAction
	to
		aOut: UML!OpaqueAction(
			name <- aIn.name,
			outgoing <- aIn.outgoing,
			incoming <- aIn.incoming,
			activity <- aIn.activity
		)
}

rule DecisionToDecision {
	from
		aIn: UML!DecisionNode
	to
		aOut: UML!DecisionNode(
			name <- aIn.name,
			outgoing <- aIn.outgoing,
			incoming <- aIn.incoming,
			activity <- aIn.activity
		)
}

rule InitalToInitial {
	from
		aIn: UML!InitialNode
	to
		aOut: UML!InitialNode(
			name <- aIn.name,
			outgoing <- aIn.outgoing,
			activity <- aIn.activity
		)
}

rule FinalToFinal {
	from
		aIn: UML!ActivityFinalNode
	to
		aOut: UML!ActivityFinalNode(
			name <- aIn.name,
			incoming <- aIn.incoming,
			activity <- aIn.activity
		)
}


rule EdgeToEdge {
	from
		eIn : UML!ControlFlow
	to
		eOut: UML!ControlFlow(
			source <- eIn.source,
			target <- eIn.target,
			guard <- eIn.guard,
			activity <- eIn.activity
		)
}

rule TypeToType {
	from
		bIn : UML!PrimitiveType
	to
		bOut : UML!PrimitiveType(
			name <- bIn.name,
			value <- bIn.value
		)
		
}


--- Rule to pack all transformed elements and **new** elements to new model
rule ModelToModel {
	from
		pIn : UML!Model
	to 
		POut : UML!Model(
			name <- thisModule.standarizeName(pIn.name) + 'Class',
			packagedElement <- pIn.packagedElement,
			packagedElement <- UML!Association.allInstances()
		)
}


--- Rule to preserve packages
rule PackageToPackage {
	from
		pIn : UML!Package(
			not pIn.oclIsTypeOf(UML!Model)	
		)
	to 
		pOut : UML!Package(
			name <- thisModule.standarizeName(pIn.name),
			packagedElement <- pIn.packagedElement
		)
}


