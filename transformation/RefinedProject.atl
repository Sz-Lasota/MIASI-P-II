-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML

module RefinedProject;
create OUT : UML refining IN : UML;

helper def : getAssociatedUseCases(a : UML!Actor) : Sequence(UML!UseCase) =
	UML!Association.allInstances()->select(
		assoc | assoc.ownedEnd->select(end | end.oclIsTypeOf(UML!Property) and end.type = a)->notEmpty()
	)->collect(
		assoc | assoc.ownedEnd->select(end | not (end.type = a))->first().type
	)->asSequence();


--- Helper to transform names with spaces to valid Class diagram names (replacing spaces with '_')
helper def : standarizeName(s : String) : String = s.replaceAll(' ', '_');


helper def: toLowerCamelCase(input : String) : String =
  let words : Sequence(String) = input.split(' ') in
  let firstWord : String = words->first().toLower() in
  let restWords : String = words->subSequence(2, words->size())->collect(
  	w | w.substring(1, 1).toUpper() + w.substring(2, w.size()).toLower()
  )->iterate(w; acc : String = '' | acc + w) in
  firstWord + restWords;

 helper def: toUpperCamelCase(input : String) : String =
  let words : Sequence(String) = input.split(' ') in
  words->collect(
  	w | w.substring(1, 1).toUpper() + w.substring(2, w.size()).toLower()
  )->iterate(w; acc : String = '' | acc + w);

helper def : getExtendedUseCase(ep: UML!ExtensionPoint) : UML!UseCase =
	UML!Extend.allInstances()->select(
		ex | ex.extensionLocation->select( ep1 | ep1=ep)->notEmpty()
	)->collect(ex | ex.owner)->first();

  
helper def : getIncomingParameters(ucName: String) : Sequence(UML!ActivityParameterNode) =
	UML!Activity.allInstances()->select(
		a | a.ownedElement->select( el | el.oclIsTypeOf(UML!InitialNode) and el.name = ucName)->notEmpty()	
	)->collect(
		a | a.node->select(n | n.oclIsTypeOf(UML!ActivityParameterNode))	
	)->flatten()->asSequence();
  
 helper def : getDirection(ap: UML!ActivityParameterNode) : String =
 	if ap.incoming->isEmpty() and ap.outgoing->notEmpty()
	then
		'in'
	else
		'return'
	endif;



rule OwnedEndToOwnedEnd {
	from
		pIn: UML!Property(not pIn.association.oclIsUndefined())
	to
		pOut: UML!Property(
			name <- pIn.name,
			type <- pIn.type,
			association <- pIn.association
		)
}

--- Rule to transform Actors to Classes
rule ActorToClass { 
	from 
		a : UML!Actor 
	to
		c : UML!Class ( 
				name <- thisModule.toUpperCamelCase(a.name) + 'Controller',
				generalization <- a.generalization
	)
}

rule ExtensionPointToAttribute {
	from
		ep :UML!ExtensionPoint
	to
		p: UML!Property(
			name <- thisModule.toLowerCamelCase(thisModule.getExtendedUseCase(ep).name),
			type <- thisModule.getExtendedUseCase(ep),
			aggregation <- 'shared'
		)
}

rule ExtendToComposition {
	from 
		e : UML!Extend
	to
		a : UML!Association(
			ownedEnd <- oM,
			memberEnd <- a.ownedEnd,
			memberEnd <- e.extensionLocation
		),
		oM: UML!Property(
			name <- e.extendedCase.name,
			type <- e.extendedCase
		)
}


rule UseCaseToClass { 
	from 
		uc : UML!UseCase
	to
		cl : UML!Class(
				name <- thisModule.toUpperCamelCase(uc.name),
				generalization <- uc.generalization,
				ownedAttribute <- uc.extensionPoint,
				ownedAttribute <- uc.include,
				ownedOperation <- op
			),
		op : UML!Operation(
			name <- thisModule.toLowerCamelCase(uc.name)
		)
}

rule ActivityParameterToOperationParameter {
	from
		ap: UML!ActivityParameterNode
	to
		op: UML!Parameter(
			name <- ap.name,
			type <- ap.type,
			direction <- thisModule.getDirection(ap)
		)
}	


rule IncludeToComposition {
	from
		inc: UML!Include
	to
		oM : UML!Property(
			name <- inc.addition.name,
			type <- inc.addition,
			aggregation <- 'shared'
		),
		a: UML!Association(
			ownedEnd <- oS,
			memberEnd <- a.ownedEnd,
			memberEnd <- oM
		),
		oS : UML!Property(
			name <- inc.owner.name,
			type <- inc.owner
		)
		
}


--- Transforms Generaliztion between Actors to Generalization between classes
rule ActorGeneralizationToGeneralization {
	from
		gIn: UML!Generalization
	to
		gOut: UML!Generalization(
			general <- gIn.general
		)
}





--- Rule to pack all transformed elements and **new** elements to new model
rule ModelToModel {
	from
		pIn : UML!Model
	to 
		POut : UML!Model(
			name <- thisModule.standarizeName(pIn.name),
			packagedElement <- pIn.packagedElement,
			packagedElement <- UML!Association.allInstances()
		)
}


--- Rule to preserve packages
rule PackageToPackage {
	from
		pIn : UML!Package(
			not pIn.oclIsTypeOf(UML!Model)	
		)
	to 
		pOut : UML!Package(
			name <- thisModule.standarizeName(pIn.name),
			packagedElement <- pIn.packagedElement
		)
}


